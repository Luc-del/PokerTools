// Code generated by "enumer -type Color -output colors.gen.go"; DO NOT EDIT.

package card

import (
	"fmt"
	"strings"
)

const _ColorName = "SpadeClubDiamondHeart"

var _ColorIndex = [...]uint8{0, 5, 9, 16, 21}

const _ColorLowerName = "spadeclubdiamondheart"

func (i Color) String() string {
	i -= 1
	if i < 0 || i >= Color(len(_ColorIndex)-1) {
		return fmt.Sprintf("Color(%d)", i+1)
	}
	return _ColorName[_ColorIndex[i]:_ColorIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ColorNoOp() {
	var x [1]struct{}
	_ = x[Spade-(1)]
	_ = x[Club-(2)]
	_ = x[Diamond-(3)]
	_ = x[Heart-(4)]
}

var _ColorValues = []Color{Spade, Club, Diamond, Heart}

var _ColorNameToValueMap = map[string]Color{
	_ColorName[0:5]:        Spade,
	_ColorLowerName[0:5]:   Spade,
	_ColorName[5:9]:        Club,
	_ColorLowerName[5:9]:   Club,
	_ColorName[9:16]:       Diamond,
	_ColorLowerName[9:16]:  Diamond,
	_ColorName[16:21]:      Heart,
	_ColorLowerName[16:21]: Heart,
}

var _ColorNames = []string{
	_ColorName[0:5],
	_ColorName[5:9],
	_ColorName[9:16],
	_ColorName[16:21],
}

// ColorString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ColorString(s string) (Color, error) {
	if val, ok := _ColorNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ColorNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Color values", s)
}

// ColorValues returns all values of the enum
func ColorValues() []Color {
	return _ColorValues
}

// ColorStrings returns a slice of all String values of the enum
func ColorStrings() []string {
	strs := make([]string, len(_ColorNames))
	copy(strs, _ColorNames)
	return strs
}

// IsAColor returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Color) IsAColor() bool {
	for _, v := range _ColorValues {
		if i == v {
			return true
		}
	}
	return false
}
