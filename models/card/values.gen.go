// Code generated by "enumer -type value -output values.gen.go"; DO NOT EDIT.

package card

import (
	"fmt"
	"strings"
)

const _ValueName = "TwoThreeFourFiveSixSevenEightNineTenJackQueenKingAce"

var _ValueIndex = [...]uint8{0, 3, 8, 12, 16, 19, 24, 29, 33, 36, 40, 45, 49, 52}

const _ValueLowerName = "twothreefourfivesixseveneightninetenjackqueenkingace"

func (i Value) String() string {
	i -= 2
	if i < 0 || i >= Value(len(_ValueIndex)-1) {
		return fmt.Sprintf("value(%d)", i+2)
	}
	return _ValueName[_ValueIndex[i]:_ValueIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ValueNoOp() {
	var x [1]struct{}
	_ = x[Two-(2)]
	_ = x[Three-(3)]
	_ = x[Four-(4)]
	_ = x[Five-(5)]
	_ = x[Six-(6)]
	_ = x[Seven-(7)]
	_ = x[Eight-(8)]
	_ = x[Nine-(9)]
	_ = x[Ten-(10)]
	_ = x[Jack-(11)]
	_ = x[Queen-(12)]
	_ = x[King-(13)]
	_ = x[Ace-(14)]
}

var _ValueValues = []Value{Two, Three, Four, Five, Six, Seven, Eight, Nine, Ten, Jack, Queen, King, Ace}

var _ValueNameToValueMap = map[string]Value{
	_ValueName[0:3]:        Two,
	_ValueLowerName[0:3]:   Two,
	_ValueName[3:8]:        Three,
	_ValueLowerName[3:8]:   Three,
	_ValueName[8:12]:       Four,
	_ValueLowerName[8:12]:  Four,
	_ValueName[12:16]:      Five,
	_ValueLowerName[12:16]: Five,
	_ValueName[16:19]:      Six,
	_ValueLowerName[16:19]: Six,
	_ValueName[19:24]:      Seven,
	_ValueLowerName[19:24]: Seven,
	_ValueName[24:29]:      Eight,
	_ValueLowerName[24:29]: Eight,
	_ValueName[29:33]:      Nine,
	_ValueLowerName[29:33]: Nine,
	_ValueName[33:36]:      Ten,
	_ValueLowerName[33:36]: Ten,
	_ValueName[36:40]:      Jack,
	_ValueLowerName[36:40]: Jack,
	_ValueName[40:45]:      Queen,
	_ValueLowerName[40:45]: Queen,
	_ValueName[45:49]:      King,
	_ValueLowerName[45:49]: King,
	_ValueName[49:52]:      Ace,
	_ValueLowerName[49:52]: Ace,
}

var _ValueNames = []string{
	_ValueName[0:3],
	_ValueName[3:8],
	_ValueName[8:12],
	_ValueName[12:16],
	_ValueName[16:19],
	_ValueName[19:24],
	_ValueName[24:29],
	_ValueName[29:33],
	_ValueName[33:36],
	_ValueName[36:40],
	_ValueName[40:45],
	_ValueName[45:49],
	_ValueName[49:52],
}

// ValueString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ValueString(s string) (Value, error) {
	if val, ok := _ValueNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ValueNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to value values", s)
}

// ValueValues returns all values of the enum
func ValueValues() []Value {
	return _ValueValues
}

// ValueStrings returns a slice of all String values of the enum
func ValueStrings() []string {
	strs := make([]string, len(_ValueNames))
	copy(strs, _ValueNames)
	return strs
}

// IsAValue returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Value) IsAValue() bool {
	for _, v := range _ValueValues {
		if i == v {
			return true
		}
	}
	return false
}
